Проблемы со стороны процесса обработки заказов:
- отсутствует отслеживание текущего состояния заказа (order state tracing)
- нет формирования оповещений о превышении запланированного срока пребывания заказа в текущем статусе (order state alerting)
- отсутствует контроль доставки получателю сообщений RabbitMQ
- отсутствует оповещение пользователя/продавца/оператора о возникновении ошибки в процессе обработки инициированного ими заказа
Проблемы со стороны задержек и быстродействия:
- долгая загрузка первой страницы MES
- долгое загрузка списка заказов
Потенциальные проблемы со стороны QA и CI/CD:
- есть юнит тесты но нет автоматических интеграционных тестов - задержка развертывание на проде
- не предусмотрено нагрузочное тестирование - прод может неожиданно упасть
- не настроен процесс развёртывания с нулевым простоем и возможностью быстрого отката на предыдущую версию - долгое время восстановления работоспособности прода

Что можно сделать со стороны кода:
- добавить контроль за размером очереди RabbitMQ (backpressure)
- добавить отправку оповещений при смене статуса заказа и при возникновении ошибок при обработке заказа
- добавить кэширование Read-Through плюс Write-Through для списка заказов
Что можно сделать со стороны инфраструктуры:
- вероятно RabbitMQ не выдерживает нагрузки, надо проверить по метрикам и, возможно, перейти на кластер Kafka
- для Shop и CRM используется единая база данных, это может усложнить масштабирование - надо разделить на две базы
- все базы надо разделить на read и write реплики для реализации CQRS
- надо добавить кэширование (и для статических данных и для ответов всех API)
- надо добавить сбор метрик и логов и настроить оповещения
Что можно сделать со стороны QA и CI/CD:
- добавить автоматические интеграционные тесты
- добавить нагрузочное тестирование
- добавить SAST (статический анализ кода)
- настроить процесс развёртывания с нулевым простоем и возможностью быстрого отката на предыдущую версию

Первоочередная задача: прекратить отток клиентов по причине сорванных сроков выполнения заказа.
Так как производственных мощностей для выполнения всех заказов достаточно с запасом, то значит проблема не в производстве, а в паузах в процессе обработки заказа.
Вероятно заказ не переходит на следующую стадию обработки по причине того, что операторы не имеют информации о том, что текущая стадия обработки завершена и надо передать заказ дальше.
Или если при обработке заказа возникла программная ошибка и текущая стадия обработки заказа даже не стартовала, то оператор этого также не узнает.
Вторая по важности задача: медленная работа MES - бизнес клиенты используют API MES и его медленная работа может служить причиной отказа от сотрудничества.
Для ускорения работы MES нужно в первую очередь добавить к нему кэш и мониторинг (и оповещения) утилизации сервера (чтобы можно было быстро добавить мощностей при экстренной необходимости).
Также очень важна задача увеличения скорости разбора инцидентов, для чего нужны подробные логи.

Таким образом первые три по важности пункта такие:
- код: добавить отправку оповещений при смене статуса заказа и при возникновении ошибок при обработке заказа
- код и инфраструктура: добавить кэширование Read-Through плюс Write-Through для списка заказов
- инфраструктура: надо добавить сбор метрик и логов и настроить оповещения

Следующие пункты в порядке убывания важности:
- инфраструктура: вероятно RabbitMQ не выдерживает нагрузки, надо проверить по метрикам и, возможно, перейти на кластер Kafka
  или если нет, то
- код: добавить контроль за размером очереди RabbitMQ (backpressure)
- QA и CI/CD: добавить автоматические интеграционные тесты
- CI/CD: настроить процесс развёртывания с нулевым простоем и возможностью быстрого отката на предыдущую версию
- код и инфраструктура: для Shop и CRM используется единая база данных, это может усложнить масштабирование - надо разделить на две базы
- код и инфраструктура: все базы надо разделить на read и write реплики для реализации CQRS
- QA: добавить нагрузочное тестирование
- QA: добавить SAST (статический анализ кода)
