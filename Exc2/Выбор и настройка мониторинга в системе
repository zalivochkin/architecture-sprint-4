Мотивация
Добавление комплексной системы мониторинга и трейсинга преследует следующие цели:
Первоочередная цель - прекратить потерю контрактов из-за срывов сроков
Мониторинг необходим для достижения это цели, так как без него нет возможности выявить причину задержек при выполнении заказов.
Стратегичесие цели
1. Так как количество заказов стабильно растёт, то нужно заранее планировать увеличение нагрузки на сервера.
Но, чтобы была возможность планирования, нужна информация о текущей нагрузке и её динамике - именно мониторинг и предоставляет эту информацию.
Тогда будет возможность закупать серверные ресурсы без необоснованного запаса и оптимизировать расходы.
2. Для повышения качества обслуживания клиентов, а значит и для увеличения количества новых заказов, нужно максимально сократить время разрешения инцидентов.
Чтобы достичь этой цели надо внедрить систему трейсинга запросов между сервисами.
Используя данные, собранные этой системой операторы смогут в кратчайшие сроки локализовать место возникновения проблемы и принять необходимые меры для решения.
3. Данные, собранные системой мониторинга, также помогут быстро выяснить, какие части системы нуждаются в первоочередной модернизации.
Это позволит сконцентрировать усилия команды разработки именно на них, а значит оптимизировать работу существующей команды без необходимости расширения - экономия на фонде оплаты труда.
4. Мониторинг работы API CRM позволит на ранних этапах выявить проблемы с формированием данных для операторов, а разработчикам превентивно эти проблемы устранить.
Это позволит операторам не отвлекаться от обработки заказов, что приведёт к ускорению обработки заказов, а значит к довольству клиентов и росту числа новых заказов (аналогично для MES API).

Таким образом внедрение системы мониторинга приведёт к:
- улучшению качества обслуживания
- оптимизации затрат
- минимизации рисков
- улучшению планирования
А значит и к росту прибыли компании значительно превосходящему планируемые инвестиции в мониторинг.

Выбор подхода к мониторингу
Для всех API буду использовать RED, так как этот подход наиболее прост, интуитивно понятен и ориентирован на мониторинг качества с точки зрения пользователя.
Для остальных сервисов (в которых не используется кэширование) лучше подходит подход USE, так как он лучше показывает степень нагруженности сервиса.

Метрики:
RED:
- Number of requests (RPS) for internet shop API - количество запросов в секунду, чтобы знать порядок текущей нагрузки на internet shop API
- Number of requests (RPS) for CRM API - количество запросов в секунду, чтобы знать порядок текущей нагрузки на CRM API
- Number of requests (RPS) for MES API - количество запросов в секунду, чтобы знать порядок текущей нагрузки на MES API
- Number of HTTP 500 for shop API - количество фатальных ошибок, произошедших при обращении к shop API
- Number of HTTP 500 for CRM API - количество фатальных ошибок, произошедших при обращении к CRM API
- Number of HTTP 500 for MES API - количество фатальных ошибок, произошедших при обращении к MES API
- Response time (latency) for shop API - длительность обработки запроса к shop API
- Response time (latency) for CRM API - длительность обработки запроса к CRM API
- Response time (latency) for MES API - длительность обработки запроса к MES API

USE:
- Memory Utilisation for shop db instance - процент использования ОЗУ на сервере с shop db
- Memory Utilisation for MES db instance - процент использования ОЗУ на сервере с MES db
- Size of shop db instance - сколько места занимает база данных shop db на диске
- Size of MES db instance - сколько места занимает база данных MES db на диске
- Failed query for shop db instance - количество неуспешных запросов к shop db
- Failed query for MES db instance - количество неуспешных запросов к MES db

Не подходящие под базовые методы:
- Number of dead-letter-exchange letters in RabbitMQ - количество сообщений, при обработке которых возникла ошибка, нужно добавить ярлык topic
- Size of S3 storage - размер хранилища файлов 3D моделей
- Number of simultanious sessions for shop API - количество одновременно открытых сессий внутренних клиентов
- Number of simultanious sessions for CRM API - количество одновременно открытых сессий операторов
- Number of simultanious sessions for MES API - количество одновременно открытых сессий внешних клиентов
- CPU % for shop API - процент загрузки процессора контейнера shop API
- CPU % for CRM API - процент загрузки процессора контейнера CRM API
- CPU % for MES API - процент загрузки процессора контейнера MES API
- Number of connections for shop db instance - количество открытых соединений к shop db
- Number of connections for MES db instance - количество открытых соединений к MES db
- Number of message in flight in RabbitMQ - количество сообщений в очереди RabbitMQ ожидающих обработки

План действий
1. Развернуть Prometheus
2. Развернуть Grafana
3. Добавить в компоненты системы поддержку метрик
4. Настроить в Prometheus сбор метрик с компонентов системы
5. Настроить дашборды и алерты в Grafana

Действия при превышении ключевых показателей для метрик (алертинг):
Нужно отправить письмо в саппорт при изменении количества любой ошибки:
- Number of HTTP 500 for shop API
- Number of HTTP 500 for CRM API
- Number of HTTP 500 for MES API
- Failed query for shop db instance
- Failed query for MES db instance
- Number of dead-letter-exchange letters in RabbitMQ
Нужно отправить письмо в саппорт если заполненность диска превысит 70%:
- Size of shop db instance
- Size of MES db instance
- Size of S3 storage
