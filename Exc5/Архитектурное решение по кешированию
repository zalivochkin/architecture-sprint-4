Мотивация

Добавление кеширования необходимо для решения проблемы низкой скорости работы страницы MES, с которой работают операторы.
Низкая работа страницы MES приводит к замедлению скорости обработки заказов и жалобам новых клиентов.

После добавления кеширования скорость работы страницы MES возрастёт, операторы будут успевать обрабатывать больше заказов за единицу времени и жалобы клиентов прекратятся.
Одновременно сократится время вынужденного простоя операторов, а значит и операционные расходы тоже можно будет оптимизировать.

Предлагаемое решение

Так как скорость работы страницы MES в большой степени определяется скоростью получения списка заказов из MES db, то предлагаю добавить кеш Redis в разрыв MES API <-> MES db.
Шаблон кеша: Refresh-ahead плюс Write-Behind.

Шаблон Refresh-ahead ускорит работу страницы MES за счёт отсутствия запросов к медленной базе MES.
Шаблон Write-Behind ускорит работу страницы MES при обновлении заказов, так как оператору не придётся ждать когда обновления реально запишутся в базу данных - это будет сделано в фоновом режиме.
Шаблон Cache-Aside в данном случае реализовать сложнее - он требует модификации компонента MES API, поэтому его не использую.

Также нужно добавить HTTP заголовки для кеширования загруженных статических файлов (клиентское кеширование) - это позволит ускорить работу старницы MES за счёт исключения повторных загрузок не изменившихся файлов.

Sequence diagrams:
refresh-ahead.puml
write-behind.puml

Так как операторам всегда необходим актуальный список заказов, а в текущей реализации загрузку этого списка операторам приходится ждать больше нескольких минут, то обновление кеша делаю с максимальной скоростью, которую может обеспечить база данных.
То есть кеш списка заказов считаю невалидным сразу после его получения из базы данных и сразу запускаю запрос на получение свежих данных.
Это позволяет гарантировать, что при сохранении максимально высокой скорости работы страницы MES данные будут иметь максимально возможную в текущих условиях актуальность.
